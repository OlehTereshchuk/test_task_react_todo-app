{"version":3,"sources":["store/todoListReducer.js","store/store.js","components/Todo.js","components/TodoList.js","components/Form.js","App.js","index.js"],"names":["todoListReducer","todoList","action","type","todo","filter","id","todoId","map","completed","title","newTitle","rootReducer","combineReducers","getTodoList","state","store","createStore","mapMethodsToProps","deleteToDo","toggleCompleteToDo","editToDo","connect","useState","selectedTodo","setSelectedTodo","inputEditValue","setInputEditValue","handleTodoChanges","trim","length","className","cn","editing","checked","onChange","htmlFor","onClick","autoFocus","onKeyUp","e","key","target","value","onBlur","TodoList","todos","Form","addTodo","inputValue","setInputValue","onSubmit","event","preventDefault","Date","placeholder","App","addToDo","setToDoList","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86e5b0ff.chunk.js","sourcesContent":["const SET_TODOLIST = 'SET_TODOLIST';\nconst ADD_TODO = 'ADD_TODO';\nconst DELETE_TODO = 'DELETE_TODO';\nconst TOGGLE_COMPLETE = 'TOGGLE_COMPLETE';\nconst EDIT_TODO = 'EDIT_TODO';\n\nexport const setTodoList = todoList => ({\n  type: SET_TODOLIST,\n  todoList,\n});\n\nexport const addTodo = todo => ({\n  type: ADD_TODO,\n  todo,\n});\n\nexport const deleteTodo = todoId => ({\n  type: DELETE_TODO,\n  todoId,\n});\n\nexport const toggleComplete = todoId => ({\n  type: TOGGLE_COMPLETE,\n  todoId,\n});\n\nexport const editTodo = (todoId, newTitle) => ({\n  type: EDIT_TODO,\n  todoId,\n  newTitle,\n});\n\nconst todoListReducer = (todoList = [], action) => {\n  switch (action.type) {\n    case SET_TODOLIST:\n      return action.todoList;\n    case ADD_TODO:\n      return [...todoList, action.todo];\n    case DELETE_TODO:\n      return todoList.filter(({ id }) => id !== action.todoId);\n    case TOGGLE_COMPLETE:\n      return todoList.map((todo) => {\n        if (todo.id === action.todoId) {\n          return {\n            ...todo, completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      });\n    case EDIT_TODO:\n      return todoList.map((todo) => {\n        if (todo.id === action.todoId) {\n          return {\n            ...todo, title: action.newTitle,\n          };\n        }\n\n        return todo;\n      });\n    default:\n      return todoList;\n  }\n};\n\nexport default todoListReducer;\n","import { createStore, combineReducers } from 'redux';\nimport todoListReducer from './todoListReducer';\n\nconst rootReducer = combineReducers({\n  todoList: todoListReducer,\n});\n\nexport const getTodoList = state => state.todoList;\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport {\n  deleteTodo, toggleComplete, editTodo,\n} from '../store/todoListReducer';\n\nconst Todo = ({\n  title, id, deleteToDo, toggleCompleteToDo, completed, editToDo,\n}) => {\n  const [selectedTodo, setSelectedTodo] = useState(null);\n  const [inputEditValue, setInputEditValue] = useState(title);\n\n  const selectToEdit = (idTodo) => {\n    setSelectedTodo(idTodo);\n  };\n\n  const handlePressEnter = (e) => {\n    if (e.key === 'Enter') {\n      handleTodoChanges();\n    }\n\n    if (e.key === 'Escape') {\n      setSelectedTodo(null);\n    }\n  };\n\n  const handleInputChange = ({ target }) => {\n    setInputEditValue(target.value);\n  };\n\n  const handleTodoChanges = () => {\n    if (inputEditValue.trim().length === 0) {\n      deleteToDo(id);\n    }\n\n    editToDo(id, inputEditValue);\n    setSelectedTodo(null);\n  };\n\n  return (\n    <li className={cn({\n      completed,\n      editing: id === selectedTodo,\n    })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={id}\n          checked={completed}\n          onChange={() => toggleCompleteToDo(id)}\n        />\n        <label htmlFor={id}>{title}</label>\n        <button\n          type=\"button\"\n          className=\"editor\"\n          onClick={() => selectToEdit(id)}\n        />\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteToDo(id)}\n        />\n      </div>\n      {selectedTodo && (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          onKeyUp={handlePressEnter}\n          onChange={handleInputChange}\n          value={inputEditValue}\n          onBlur={handleTodoChanges}\n        />\n      )}\n    </li>\n  );\n};\n\nconst mapMethodsToProps = {\n  deleteToDo: deleteTodo,\n  toggleCompleteToDo: toggleComplete,\n  editToDo: editTodo,\n};\n\nTodo.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  deleteToDo: PropTypes.func.isRequired,\n  toggleCompleteToDo: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  editToDo: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapMethodsToProps)(Todo);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos }) => (\n  <ul className=\"todo-list\">\n    {todos.map(({ title, id, completed }) => (\n      <Todo\n        title={title}\n        id={id}\n        key={id}\n        completed={completed}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Form = ({ addTodo }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInput = ({ target }) => {\n    setInputValue(target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (inputValue.trim() !== '') {\n      addTodo({\n        title: inputValue,\n        id: +new Date(),\n        completed: false,\n      });\n\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={handleInput}\n        value={inputValue}\n      />\n    </form>\n  );\n};\n\nForm.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport TodoList from './components/TodoList';\nimport Form from './components/Form';\nimport { setTodoList, addTodo } from './store/todoListReducer';\nimport { getTodoList } from './store/store';\n\nconst App = ({ todoList, addToDo, setToDoList }) => {\n  useEffect(() => {\n    const data = localStorage.getItem('todo-list');\n\n    if (data) {\n      setToDoList(JSON.parse(data));\n    }\n  }, [setToDoList]);\n\n  useEffect(() => {\n    localStorage.setItem('todo-list', JSON.stringify(todoList));\n  });\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <Form addTodo={addToDo} />\n      </header>\n      {todoList.length > 0\n        ? (\n          <section className=\"main\">\n            <TodoList todos={todoList} />\n          </section>\n        )\n        : ''\n      }\n    </section>\n  );\n};\n\nconst mapStateToProps = state => ({\n  todoList: getTodoList(state),\n});\n\nconst mapMethodsToProps = {\n  setToDoList: setTodoList,\n  addToDo: addTodo,\n};\n\nApp.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object),\n  addToDo: PropTypes.func.isRequired,\n  setToDoList: PropTypes.func.isRequired,\n};\n\nApp.defaultProps = {\n  todoList: [],\n};\n\nexport default connect(mapStateToProps, mapMethodsToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}